pipeline {
    agent any

    environment {
        REMOTE_USER = "ubuntu" // Change if using a different user
        REMOTE_HOST = "<remote-server-ip>" // Replace with actual remote server IP
        REMOTE_PATH = "/home/ubuntu/" // Directory on the remote server
        JAR_NAME = "Calculator-1.0-SNAPSHOT.jar" // Change based on your actual JAR file name
        IMAGE_NAME = "my-java-app"
        CONTAINER_NAME = "my-app-container"
    }

    stages {
        stage('Build JAR') {
            steps {
                echo "Building JAR file with Maven..."
                sh 'mvn clean package'
            }
        }

        stage('Copy JAR to Remote Server') {
            steps {
                echo "Copying JAR file to remote server..."
                sh "scp -o StrictHostKeyChecking=no target/${JAR_NAME} ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PATH}"
            }
        }

        stage('Deploy on Remote Server') {
            steps {
                echo "Deploying on Remote Server..."
                sh """
                ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} <<EOF
                cd ${REMOTE_PATH}

                echo 'FROM openjdk:17-jdk-slim
                WORKDIR /app
                COPY ${JAR_NAME} app.jar
                EXPOSE 8080
                CMD ["java", "-jar", "app.jar"]' > Dockerfile

                echo "Building Docker image..."
                docker build -t ${IMAGE_NAME} .

                echo "Stopping and removing existing container (if any)..."
                docker stop ${CONTAINER_NAME} || true
                docker rm ${CONTAINER_NAME} || true

                echo "Running new Docker container..."
                docker run -d -p 8080:8080 --name ${CONTAINER_NAME} ${IMAGE_NAME}
                EOF
                """
            }
        }
    }

    post {
        success {
            echo "Deployment successful!"
        }
        failure {
            echo "Deployment failed!"
        }
    }
}
